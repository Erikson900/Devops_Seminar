
# Building the main image, pipe starting point - The image from which the rest of the pipeline images would be based on
# Phase I
FROM python:3.6 as builder
# PYTHONUNBUFFERED Force logging to stdout / stderr not to be buffered into ram  
ENV PYTHONUNBUFFERED=1 
WORKDIR /usr/src/app
COPY flask-api/ ./
WORKDIR /wheels
COPY flask-api/requirements.txt ./requirements.txt
# PIP Will create an archive of our libraries so we don't need to download them again
# argument - wheel
RUN pip wheel -r ./requirements.txt 


# Linting test image  - Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.
# Phase II
FROM eeacms/pylint:latest as linting
WORKDIR /code
COPY --from=builder /usr/src/app/pylint.cfg /etc/pylint.cfg
COPY --from=builder /usr/src/app/*.py ./
COPY --from=builder /usr/src/app/api ./api
RUN ["/docker-entrypoint.sh", "pylint"]


# Test connection to sonarqube -  SonarQube for security check
# Phase III
FROM newtmitch/sonar-scanner as sonarqube
WORKDIR /usr/src
COPY ./sonar-runner.properties /usr/lib/sonar-scanner/conf/sonar-scanner.properties
COPY --from=builder /usr/src/app/*.py ./
COPY --from=builder /usr/src/app/api ./api
RUN sonar-scanner -Dsonar.projectBaseDir=/usr/src

#latest python version has to be installed
# Runs Unit Tests
# Phase IV
#FROM python:latest as unit-tests
#WORKDIR /usr/src/app
#COPY --from=builder /wheels /wheels   
#COPY --from=builder /usr/src/app/ ./
#RUN ["make", "test"]


# Starts and Serves Web Page
# Phase VI
FROM python:3.6-slim as serve
WORKDIR /usr/src/app
# Copy all packages instead of rerunning pip install
COPY --from=builder /wheels /wheels
RUN     pip install -r /wheels/requirements.txt \
                      -f /wheels \
       && rm -rf /wheels \
       && rm -rf /root/.cache/pip/* 

COPY --from=builder /usr/src/app/*.py ./
COPY --from=builder /usr/src/app/api ./api
CMD ["python", "run_app.py"]




